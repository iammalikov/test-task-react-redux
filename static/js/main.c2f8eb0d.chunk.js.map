{"version":3,"sources":["utils/storage.js","modules/search-results/constants.js","modules/search-results/reducers.js","modules/favorite-albums/constants.js","modules/favorite-albums/reducers.js","core/store.js","core/reducers.js","utils/api.js","utils/serialize.js","modules/search-results/actions.js","modules/search/components/Search.jsx","modules/search/containers/Search.js","modules/search/index.js","modules/favorite-albums/actions.js","modules/search-results/components/SearchResults.jsx","modules/search-results/containers/SearchResults.js","modules/search-results/index.js","pages/Main.jsx","modules/favorite-albums/components/FavoriteAlbums.jsx","modules/favorite-albums/containers/FavoriteAlbums.js","modules/favorite-albums/index.js","pages/Favorite.jsx","App.jsx","index.js"],"names":["getFavoriteAlbums","JSON","parse","localStorage","getItem","updateFavoriteAlbums","list","setItem","stringify","constants","searchResults","state","arguments","length","undefined","data","action","type","payload","favorite_albums_constants","favoriteAlbums","history","createBrowserHistory","middleware","thunk","routerMiddleware","composedEnhancers","compose","apply","applyMiddleware","concat","hasOwnProperty","createStore","combineReducers","router","connectRouter","releaseApi","query","fetch","encodeURIComponent","then","response","json","id","serializeAlbum","album","albumName","title","artistName","artists","map","item","artist","name","join","SearchResultsActions","setSearchResults","fetchSearchResults","dispatch","albums","dirtyAlbumsData","cleanAlbumsData","resetSearchResults","InputSearch","Input","Search","_ref","onSearch","react_default","a","createElement","placeholder","size","value","className","enterButton","mapDispatchToProps","connect","FavoriteAlbumActions","addToFavorites","target","fetchFavoriteAlbum","cleanAlbumData","addAlbumToStorage","currentList","unshift","removeAlbumFromStorage","_ref2","newList","filter","setFavoriteAlbums","resetFavoriteAlbums","SearchResults","albumsList","es_list","itemLayout","dataSource","renderItem","Item","Meta","description","es_button","onClick","Object","objectSpread","FavoriteAlbumsActions","lifecycle","componentWillUnmount","this","props","Title","Typography","Main","react","search","search_results","FavoriteAlbums","componentDidMount","Favorite","Favorite_Title","favorite_albums","Header","Layout","Content","pathname","location","layout","menu","theme","mode","defaultSelectedKeys","selectedKeys","key","process","react_router_dom","to","react_router","path","component","exact","render","es","store","esm","src_App","document","getElementById"],"mappings":"yOAMaA,EAAoB,kBAC/BC,KAAKC,MAAMC,aAAaC,QAAQ,oBAErBC,EAAuB,SAAAC,GAClCH,aAAaI,QAAQ,iBAAkBN,KAAKO,UAAUF,KCVzCG,EACO,0BADPA,EAES,4BCeTC,EAXO,WAAoC,IAAnCC,EAAmCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAJ9B,CAC1BG,KAAM,IAGuCC,EAAWJ,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACxD,OAAQE,EAAOC,MACb,KAAKR,EACH,MAAO,CAAEM,KAAMC,EAAOE,SACxB,KAAKT,EACH,MATsB,CAC1BM,KAAM,IASJ,QACE,OAAOJ,ICbEQ,EACQ,8BADRA,EAEU,4BCeVC,EAXQ,WAAoC,IAAnCT,EAAmCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAJ/B,CAC1BG,KAAM,IAGwCC,EAAWJ,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACzD,OAAQE,EAAOC,MACb,KAAKR,EACH,MAAO,CAAEM,KAAMC,EAAOE,SACxB,KAAKT,EACH,MATsB,CAC1BM,KAAM,IASJ,QACE,OAAOJ,ICJAU,EAAUC,cAIjBC,EAAa,CAACC,IAAOC,YAAiBJ,IAUtCK,EAAoBC,IAAOC,WAAP,GACxBC,IAAeD,WAAf,EAAmBL,IADKO,OAXR,KLXX3B,aAAa4B,eAAe,mBAC/B5B,aAAaI,QAAQ,iBAAkB,MK4B5ByB,ICxBAX,EDwBAW,eCxBAX,EDyBKA,ECxBlBY,YAAgB,CACdvB,gBACAU,iBACAc,OAAQC,YAAcd,MDCL,GAsBnBK,8CEjCWU,EACH,SAAAC,GAAK,OACXC,MAAK,oDAAAR,OACiDS,mBAClDF,GAFC,cAIHG,KAAK,SAAAC,GAAQ,OAAIA,EAASC,UANnBN,EAOC,SAAAO,GAAE,OACZL,MAAK,8CAAAR,OAC2CS,mBAC5CI,GAFC,iCAIHH,KAAK,SAAAC,GAAQ,OAAIA,EAASC,UCTnBE,EAAiB,SAAAC,GAAK,MAAK,CACtCF,GAAIE,EAAMF,GACVG,UAAWD,EAAME,MACjBC,YANuBC,EAMMJ,EAAM,iBALnCI,EAAQC,IAAI,SAAAC,GAAI,OAAIA,EAAKC,OAAOC,OAAMC,KAAK,QADpB,IAAAL,GCKnBM,EAAuB,CAC3BC,iBAAkB,SAAAzC,GAAI,MAAK,CACzBE,KAAMR,EACNS,QAASH,IAEX0C,mBAAoB,SAAApB,GAAK,OAAI,SAAAqB,GAC3BtB,EAAkBC,GAAOG,KAAK,SAAAC,GAC5B,IDHyBkB,ECGnBC,EAAkBnB,EAAS,kBAC3BoB,GDJmBF,ECIeC,GDHhC/C,OAEL8C,EAAOT,IAAI,SAAAL,GAAK,OAAID,EAAeC,KAFfc,ECKvBD,EAASH,EAAqBC,iBAAiBK,QAGnDC,mBAAoB,iBAAO,CACzB7C,KAAMR,KAIK8C,ICpBTQ,SAAcC,EAAMC,OAWXA,EATA,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OACbC,EAAAC,EAAAC,cAACP,EAAD,CACEQ,YAAY,8BACZC,KAAK,QACLL,SAAU,SAAAM,GAAK,QAAKA,EAAM5D,QAASsD,EAASM,IAC5CC,UAAU,SACVC,aAAW,KCLTC,EAAqB,CACzBT,SAAU,SAAA9B,GAAK,OAAI,SAAAqB,GAAQ,OACzBA,EAASH,EAAqBE,mBAAmBpB,OCNtC4B,EDSAY,YACb,KACAD,EAFaC,CAGbZ,mBERIa,EAAuB,CAC3BC,eAAgB,SAAAb,GAAA,IAAavB,EAAbuB,EAAGc,OAAUrC,GAAb,OAAwB,SAAAe,GACtCA,EAASoB,EAAqBG,mBAAmBtC,MAEnDsC,mBAAoB,SAAAtC,GAAE,OAAI,SAAAe,GACxBtB,EAAsBO,GAAIH,KAAK,SAAAC,GAC7B,IAAMyC,EAAiBtC,EAAeH,GAEtCiB,EAASoB,EAAqBK,kBAAkBD,QAGpDC,kBAAmB,SAAAtC,GAAK,OAAI,WAC1B,IAAMuC,EAAcpF,IAEpBoF,EAAYC,QAAQxC,GACpBxC,EAAqB+E,KAEvBE,uBAAwB,SAAAC,GAAA,IAAa5C,EAAb4C,EAAGP,OAAUrC,GAAb,OAAwB,SAAAe,GAC9C,IACM8B,EADcxF,IACQyF,OAAO,SAAAtC,GAAI,OAAIA,EAAKR,KAAOA,IAEvDtC,EAAqBmF,GACrB9B,EAASoB,EAAqBY,kBAAkBF,MAElDE,kBAAmB,SAAApF,GAAI,MAAK,CAC1BW,KAAMR,EACNS,QAASZ,IAEXqF,oBAAqB,iBAAO,CAC1B1E,KAAMR,KAIKqE,qBCrBAc,EAfO,SAAA1B,GAAA,IAAG2B,EAAH3B,EAAG2B,WAAYd,EAAfb,EAAea,eAAf,OACpBX,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CACEC,WAAW,aACXC,WAAYH,EACZI,WAAY,SAAA9C,GAAI,OACdiB,EAAAC,EAAAC,cAACwB,EAAA,EAAKI,KAAN,KACE9B,EAAAC,EAAAC,cAACwB,EAAA,EAAKI,KAAKC,KAAX,CAAgBpD,MAAOI,EAAKL,UAAWsD,YAAajD,EAAKH,aACzDoB,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAAQ1D,GAAIQ,EAAKR,GAAI1B,KAAK,UAAUqF,QAASvB,GAA7C,wBCEFH,EAAkB2B,OAAAC,EAAA,EAAAD,CAAA,GACnBhD,EACAkD,GCZUb,EDeAjE,YACbkD,YAVsB,SAAAX,GAAA,MAAwB,CAC9C2B,WADsB3B,EAAGxD,cACCK,OAWxB6D,GAEF8B,YAAU,CACRC,qBADQ,WAENC,KAAKC,MAAM/C,wBAPFnC,CAUbiE,GErBMkB,EAAUC,IAAVD,MAUOE,EARF,kBACX5C,EAAAC,EAAAC,cAAC2C,EAAA,SAAD,KACE7C,EAAAC,EAAAC,cAACwC,EAAD,4BACA1C,EAAAC,EAAAC,cAAC4C,EAAD,MACA9C,EAAAC,EAAAC,cAAC6C,EAAD,QCUWC,EAnBQ,SAAAlD,GAAA,IAAG9C,EAAH8C,EAAG9C,eAAgBkE,EAAnBpB,EAAmBoB,uBAAnB,OACrBlB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CACEC,WAAW,aACXC,WAAY5E,EACZ6E,WAAY,SAAA9C,GAAI,OACdiB,EAAAC,EAAAC,cAACwB,EAAA,EAAKI,KAAN,KACE9B,EAAAC,EAAAC,cAACwB,EAAA,EAAKI,KAAKC,KAAX,CACExD,GAAIQ,EAAKR,GACTI,MAAOI,EAAKL,UACZsD,YAAajD,EAAKH,aAEpBoB,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAAQ1D,GAAIQ,EAAKR,GAAI1B,KAAK,UAAUqF,QAAShB,GAA7C,6BCFFV,EAAkB2B,OAAAC,EAAA,EAAAD,CAAA,GACnBE,GCXUW,EDcAzF,YACbkD,YATsB,SAAAX,GAAA,MAAyB,CAC/C9C,eADsB8C,EAAG9C,eACML,OAU7B6D,GAEF8B,YAAU,CACRW,kBADQ,WAEN,IAAMjC,EAAcpF,IAEpB4G,KAAKC,MAAMnB,kBAAkBN,IAE/BuB,qBANQ,WAONC,KAAKC,MAAMlB,yBAZFhE,CAebyF,GE1BMN,EAAUC,IAAVD,MASOQ,GAPE,kBACflD,EAAAC,EAAAC,cAAC2C,EAAA,SAAD,KACE7C,EAAAC,EAAAC,cAACiD,EAAD,iCACAnD,EAAAC,EAAAC,cAACkD,EAAD,QCFIC,GAAoBC,IAApBD,OAAQE,GAAYD,IAAZC,QAoCD9C,eAnCS,SAAAX,GAAA,MAAiB,CACvC0D,SADsB1D,EAAGhC,OACR2F,SAASD,WAoC1B,KAFa/C,CA/BH,SAAAU,GAAA,IAAGqC,EAAHrC,EAAGqC,SAAH,OACVxD,EAAAC,EAAAC,cAAA,OAAKI,UAAU,OACbN,EAAAC,EAAAC,cAACwD,EAAA,EAAD,CAAQpD,UAAU,UAChBN,EAAAC,EAAAC,cAACmD,GAAD,CAAQ/C,UAAU,UAChBN,EAAAC,EAAAC,cAACyD,EAAA,EAAD,CACEC,MAAM,OACNC,KAAK,aACLC,oBAAqB,CAACN,GACtBO,aAAc,CAACP,GACflD,UAAU,QAEVN,EAAAC,EAAAC,cAACyD,EAAA,EAAK7B,KAAN,CAAWkC,IAAKC,2BACdjE,EAAAC,EAAAC,cAACgE,EAAA,EAAD,CAAMC,GAAIF,2BAAV,SAEFjE,EAAAC,EAAAC,cAACyD,EAAA,EAAK7B,KAAN,CAAWkC,IAAKC,mCACdjE,EAAAC,EAAAC,cAACgE,EAAA,EAAD,CAAMC,GAAIF,mCAAV,eAINjE,EAAAC,EAAAC,cAACqD,GAAD,CAASjD,UAAU,WACjBN,EAAAC,EAAAC,cAACkE,EAAA,EAAD,CAAOC,KAAMJ,0BAA8BK,UAAW1B,EAAM2B,OAAK,IACjEvE,EAAAC,EAAAC,cAACkE,EAAA,EAAD,CACEC,KAAMJ,kCACNK,UAAWpB,GACXqB,OAAK,uBC1BfC,iBACExE,EAAAC,EAAAC,cAACuE,EAAA,EAAD,CAAUC,MAAOA,GACf1E,EAAAC,EAAAC,cAACyE,EAAA,EAAD,CAAiB1H,QAASA,GACxB+C,EAAAC,EAAAC,cAAC0E,GAAD,QAIJC,SAASC,eAAe","file":"static/js/main.c2f8eb0d.chunk.js","sourcesContent":["export const createStorageFavoriteAlbums = () => {\n  if (!localStorage.hasOwnProperty(\"favoriteAlbums\")) {\n    localStorage.setItem(\"favoriteAlbums\", \"[]\");\n  }\n};\n\nexport const getFavoriteAlbums = () =>\n  JSON.parse(localStorage.getItem(\"favoriteAlbums\"));\n\nexport const updateFavoriteAlbums = list => {\n  localStorage.setItem(\"favoriteAlbums\", JSON.stringify(list));\n};\n","export default {\n  SEARCH_RESULTS_SET: \"set search results data\",\n  SEARCH_RESULTS_RESET: \"reset search results data\"\n};\n","import constants from \"./constants\";\n\nconst defaultState = () => ({\n  data: []\n});\n\nconst searchResults = (state = defaultState(), action) => {\n  switch (action.type) {\n    case constants.SEARCH_RESULTS_SET:\n      return { data: action.payload };\n    case constants.SEARCH_RESULTS_RESET:\n      return defaultState();\n    default:\n      return state;\n  }\n};\n\nexport default searchResults;\n","export default {\n  FAVORITE_ALBUMS_SET: \"set list of favorite albums\",\n  FAVORITE_ALBUMS_RESET: \"reset favorite album list\"\n};\n","import constants from \"./constants\";\n\nconst defaultState = () => ({\n  data: []\n});\n\nconst favoriteAlbums = (state = defaultState(), action) => {\n  switch (action.type) {\n    case constants.FAVORITE_ALBUMS_SET:\n      return { data: action.payload };\n    case constants.FAVORITE_ALBUMS_RESET:\n      return defaultState();\n    default:\n      return state;\n  }\n};\n\nexport default favoriteAlbums;\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport { routerMiddleware } from \"connected-react-router\";\nimport thunk from \"redux-thunk\";\nimport { createBrowserHistory } from \"history\";\n\nimport { createStorageFavoriteAlbums } from \"../utils/storage\";\n\nimport createRootReducer from \"./reducers\";\n\nexport const history = createBrowserHistory();\n\nconst initialState = {};\nconst enhancers = [];\nconst middleware = [thunk, routerMiddleware(history)];\n\nif (process.env.NODE_ENV === \"development\") {\n  const devToolsExtension = window.__REDUX_DEVTOOLS_EXTENSION__;\n\n  if (typeof devToolsExtension === \"function\") {\n    enhancers.push(devToolsExtension());\n  }\n}\n\nconst composedEnhancers = compose(\n  applyMiddleware(...middleware),\n  ...enhancers\n);\n\ncreateStorageFavoriteAlbums();\n\nexport default createStore(\n  createRootReducer(history),\n  initialState,\n  composedEnhancers\n);\n","import { combineReducers } from \"redux\";\nimport { connectRouter } from \"connected-react-router\";\n\nimport searchResults from \"../modules/search-results/reducers\";\nimport favoriteAlbums from \"../modules/favorite-albums/reducers\";\n\nexport default history =>\n  combineReducers({\n    searchResults,\n    favoriteAlbums,\n    router: connectRouter(history)\n  });\n","export const releaseApi = {\n  search: query =>\n    fetch(\n      `https://musicbrainz.org/ws/2/release-group?query=${encodeURIComponent(\n        query\n      )}&fmt=json`\n    ).then(response => response.json()),\n  getRelease: id =>\n    fetch(\n      `https://musicbrainz.org/ws/2/release-group/${encodeURIComponent(\n        id\n      )}?inc=artist-credits&fmt=json`\n    ).then(response => response.json())\n};\n","const serializeArtists = artists =>\n  artists.map(item => item.artist.name).join(\", \");\n\nexport const serializeAlbum = album => ({\n  id: album.id,\n  albumName: album.title,\n  artistName: serializeArtists(album[\"artist-credit\"])\n});\n\nexport const serializeAlbums = albums => {\n  if (!albums.length) return albums;\n\n  return albums.map(album => serializeAlbum(album));\n};\n","import { releaseApi } from \"../../utils/api\";\nimport { serializeAlbums } from \"../../utils/serialize\";\n\nimport constants from \"./constants\";\n\nconst SearchResultsActions = {\n  setSearchResults: data => ({\n    type: constants.SEARCH_RESULTS_SET,\n    payload: data\n  }),\n  fetchSearchResults: query => dispatch => {\n    releaseApi.search(query).then(response => {\n      const dirtyAlbumsData = response[\"release-groups\"];\n      const cleanAlbumsData = serializeAlbums(dirtyAlbumsData);\n\n      dispatch(SearchResultsActions.setSearchResults(cleanAlbumsData));\n    });\n  },\n  resetSearchResults: () => ({\n    type: constants.SEARCH_RESULTS_RESET\n  })\n};\n\nexport default SearchResultsActions;\n","import React from \"react\";\nimport { Input } from \"antd\";\n\nconst InputSearch = Input.Search;\n\nconst Search = ({ onSearch }) => (\n  <InputSearch\n    placeholder=\"Enter the name of the album\"\n    size=\"large\"\n    onSearch={value => (value.length ? onSearch(value) : false)}\n    className=\"search\"\n    enterButton\n  />\n);\nexport default Search;\n","import { connect } from \"react-redux\";\n\nimport SearchResultsActions from \"../../search-results/actions\";\n\nimport Search from \"../components/Search\";\n\nconst mapDispatchToProps = {\n  onSearch: query => dispatch =>\n    dispatch(SearchResultsActions.fetchSearchResults(query))\n};\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(Search);\n","import Search from \"./containers/Search\";\n\nexport default Search;\n","import { releaseApi } from \"../../utils/api\";\nimport { serializeAlbum } from \"../../utils/serialize\";\nimport { getFavoriteAlbums, updateFavoriteAlbums } from \"../../utils/storage\";\n\nimport constants from \"./constants\";\n\nconst FavoriteAlbumActions = {\n  addToFavorites: ({ target: { id } }) => dispatch => {\n    dispatch(FavoriteAlbumActions.fetchFavoriteAlbum(id));\n  },\n  fetchFavoriteAlbum: id => dispatch => {\n    releaseApi.getRelease(id).then(response => {\n      const cleanAlbumData = serializeAlbum(response);\n\n      dispatch(FavoriteAlbumActions.addAlbumToStorage(cleanAlbumData));\n    });\n  },\n  addAlbumToStorage: album => () => {\n    const currentList = getFavoriteAlbums();\n\n    currentList.unshift(album);\n    updateFavoriteAlbums(currentList);\n  },\n  removeAlbumFromStorage: ({ target: { id } }) => dispatch => {\n    const currentList = getFavoriteAlbums();\n    const newList = currentList.filter(item => item.id !== id);\n\n    updateFavoriteAlbums(newList);\n    dispatch(FavoriteAlbumActions.setFavoriteAlbums(newList));\n  },\n  setFavoriteAlbums: list => ({\n    type: constants.FAVORITE_ALBUMS_SET,\n    payload: list\n  }),\n  resetFavoriteAlbums: () => ({\n    type: constants.FAVORITE_ALBUMS_RESET\n  })\n};\n\nexport default FavoriteAlbumActions;\n","import React from \"react\";\nimport { List, Button } from \"antd\";\n\nconst SearchResults = ({ albumsList, addToFavorites }) => (\n  <List\n    itemLayout=\"horizontal\"\n    dataSource={albumsList}\n    renderItem={item => (\n      <List.Item>\n        <List.Item.Meta title={item.albumName} description={item.artistName} />\n        <Button id={item.id} type=\"primary\" onClick={addToFavorites}>\n          add to favorite\n        </Button>\n      </List.Item>\n    )}\n  />\n);\n\nexport default SearchResults;\n","import { compose, lifecycle } from \"recompose\";\nimport { connect } from \"react-redux\";\n\nimport FavoriteAlbumsActions from \"../../favorite-albums/actions\";\n\nimport SearchResultsActions from \"../actions\";\nimport SearchResults from \"../components/SearchResults\";\n\nconst mapStateToProps = ({ searchResults }) => ({\n  albumsList: searchResults.data\n});\n\nconst mapDispatchToProps = {\n  ...SearchResultsActions,\n  ...FavoriteAlbumsActions\n};\n\nexport default compose(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  ),\n  lifecycle({\n    componentWillUnmount() {\n      this.props.resetSearchResults();\n    }\n  })\n)(SearchResults);\n","import SearchResults from \"./containers/SearchResults\";\n\nexport default SearchResults;\n","import React, { Fragment } from \"react\";\nimport { Typography } from \"antd\";\n\nimport Search from \"../modules/search\";\nimport SearchResults from \"../modules/search-results\";\n\nconst { Title } = Typography;\n\nconst Main = () => (\n  <Fragment>\n    <Title>Search music albums</Title>\n    <Search />\n    <SearchResults />\n  </Fragment>\n);\n\nexport default Main;\n","import React from \"react\";\nimport { List, Button } from \"antd\";\n\nconst FavoriteAlbums = ({ favoriteAlbums, removeAlbumFromStorage }) => (\n  <List\n    itemLayout=\"horizontal\"\n    dataSource={favoriteAlbums}\n    renderItem={item => (\n      <List.Item>\n        <List.Item.Meta\n          id={item.id}\n          title={item.albumName}\n          description={item.artistName}\n        />\n        <Button id={item.id} type=\"primary\" onClick={removeAlbumFromStorage}>\n          remove from favorite\n        </Button>\n      </List.Item>\n    )}\n  />\n);\n\nexport default FavoriteAlbums;\n","import { compose, lifecycle } from \"recompose\";\nimport { connect } from \"react-redux\";\n\nimport { getFavoriteAlbums } from \"../../../utils/storage\";\n\nimport FavoriteAlbumsActions from \"../actions\";\nimport FavoriteAlbums from \"../components/FavoriteAlbums\";\n\nconst mapStateToProps = ({ favoriteAlbums }) => ({\n  favoriteAlbums: favoriteAlbums.data\n});\n\nconst mapDispatchToProps = {\n  ...FavoriteAlbumsActions\n};\n\nexport default compose(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  ),\n  lifecycle({\n    componentDidMount() {\n      const currentList = getFavoriteAlbums();\n\n      this.props.setFavoriteAlbums(currentList);\n    },\n    componentWillUnmount() {\n      this.props.resetFavoriteAlbums();\n    }\n  })\n)(FavoriteAlbums);\n","import FavoriteAlbums from \"./containers/FavoriteAlbums\";\n\nexport default FavoriteAlbums;\n","import React, { Fragment } from \"react\";\nimport { Typography } from \"antd\";\n\nimport FavoriteAlbums from \"../modules/favorite-albums\";\n\nconst { Title } = Typography;\n\nconst Favorite = () => (\n  <Fragment>\n    <Title>My favorite music albums</Title>\n    <FavoriteAlbums />\n  </Fragment>\n);\n\nexport default Favorite;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Route, Link } from \"react-router-dom\";\nimport { Layout, Menu } from \"antd\";\n\nimport Main from \"./pages/Main\";\nimport Favorite from \"./pages/Favorite\";\n\nconst { Header, Content } = Layout;\nconst mapStateToProps = ({ router }) => ({\n  pathname: router.location.pathname\n});\n\nconst App = ({ pathname }) => (\n  <div className=\"app\">\n    <Layout className=\"layout\">\n      <Header className=\"header\">\n        <Menu\n          theme=\"dark\"\n          mode=\"horizontal\"\n          defaultSelectedKeys={[pathname]}\n          selectedKeys={[pathname]}\n          className=\"menu\"\n        >\n          <Menu.Item key={process.env.PUBLIC_URL + \"/\"}>\n            <Link to={process.env.PUBLIC_URL + \"/\"}>Home</Link>\n          </Menu.Item>\n          <Menu.Item key={process.env.PUBLIC_URL + \"/favorite\"}>\n            <Link to={process.env.PUBLIC_URL + \"/favorite\"}>Favorite</Link>\n          </Menu.Item>\n        </Menu>\n      </Header>\n      <Content className=\"content\">\n        <Route path={process.env.PUBLIC_URL + \"/\"} component={Main} exact />\n        <Route\n          path={process.env.PUBLIC_URL + \"/favorite\"}\n          component={Favorite}\n          exact\n        />\n      </Content>\n    </Layout>\n  </div>\n);\n\nexport default connect(\n  mapStateToProps,\n  null\n)(App);\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { ConnectedRouter } from \"connected-react-router\";\n\nimport store, { history } from \"./core/store\";\nimport App from \"./App\";\n\nimport \"antd/dist/antd.css\";\nimport \"./assets/index.css\";\n\nrender(\n  <Provider store={store}>\n    <ConnectedRouter history={history}>\n      <App />\n    </ConnectedRouter>\n  </Provider>,\n\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}